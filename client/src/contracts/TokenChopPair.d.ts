/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenChopPairInterface extends ethers.utils.Interface {
  functions: {
    "FEE_DECIMALS()": FunctionFragment;
    "PRICE_DECIMALS()": FunctionFragment;
    "SLICE_POINT()": FunctionFragment;
    "SLICE_POINT_DECIMALS()": FunctionFragment;
    "closePrice()": FunctionFragment;
    "fee()": FunctionFragment;
    "highToken()": FunctionFragment;
    "lowToken()": FunctionFragment;
    "openPrice()": FunctionFragment;
    "setClosePrice(uint256)": FunctionFragment;
    "getHighTokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLICE_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLICE_POINT_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "highToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "lowToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "openPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClosePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLICE_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLICE_POINT_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closePrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lowToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClosePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class TokenChopPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenChopPairInterface;

  functions: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    "FEE_DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    "PRICE_DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

    SLICE_POINT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SLICE_POINT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SLICE_POINT_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    "SLICE_POINT_DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

    closePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "closePrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    highToken(overrides?: CallOverrides): Promise<[string]>;

    "highToken()"(overrides?: CallOverrides): Promise<[string]>;

    lowToken(overrides?: CallOverrides): Promise<[string]>;

    "lowToken()"(overrides?: CallOverrides): Promise<[string]>;

    openPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "openPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setClosePrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setClosePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getHighTokens(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getHighTokens()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;
  };

  FEE_DECIMALS(overrides?: CallOverrides): Promise<number>;

  "FEE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

  PRICE_DECIMALS(overrides?: CallOverrides): Promise<number>;

  "PRICE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

  SLICE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

  "SLICE_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

  SLICE_POINT_DECIMALS(overrides?: CallOverrides): Promise<number>;

  "SLICE_POINT_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

  closePrice(overrides?: CallOverrides): Promise<BigNumber>;

  "closePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  highToken(overrides?: CallOverrides): Promise<string>;

  "highToken()"(overrides?: CallOverrides): Promise<string>;

  lowToken(overrides?: CallOverrides): Promise<string>;

  "lowToken()"(overrides?: CallOverrides): Promise<string>;

  openPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "openPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  setClosePrice(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setClosePrice(uint256)"(
    _price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getHighTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getHighTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<number>;

    "FEE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<number>;

    "PRICE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    SLICE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    "SLICE_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SLICE_POINT_DECIMALS(overrides?: CallOverrides): Promise<number>;

    "SLICE_POINT_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    closePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "closePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    highToken(overrides?: CallOverrides): Promise<string>;

    "highToken()"(overrides?: CallOverrides): Promise<string>;

    lowToken(overrides?: CallOverrides): Promise<string>;

    "lowToken()"(overrides?: CallOverrides): Promise<string>;

    openPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "openPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClosePrice(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setClosePrice(uint256)"(
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getHighTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getHighTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "PRICE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    SLICE_POINT(overrides?: CallOverrides): Promise<BigNumber>;

    "SLICE_POINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    SLICE_POINT_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "SLICE_POINT_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    closePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "closePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    highToken(overrides?: CallOverrides): Promise<BigNumber>;

    "highToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    lowToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lowToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    openPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "openPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    setClosePrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setClosePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getHighTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getHighTokens()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_DECIMALS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRICE_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SLICE_POINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SLICE_POINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SLICE_POINT_DECIMALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SLICE_POINT_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "closePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "highToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lowToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lowToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "openPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClosePrice(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setClosePrice(uint256)"(
      _price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getHighTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHighTokens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
