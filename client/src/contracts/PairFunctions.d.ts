/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PairFunctionsInterface extends ethers.utils.Interface {
  functions: {
    "CHANGE_DECIMALS()": FunctionFragment;
    "priceChange(uint256,uint256)": FunctionFragment;
    "calculateProfitSplit(int256,uint256)": FunctionFragment;
    "calculateRebalancePercentage(uint256,uint256)": FunctionFragment;
    "calculateHighClosingTokens(uint256,int256,uint256,uint256)": FunctionFragment;
    "calculateLowClosingTokens(uint256,int256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CHANGE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceChange",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProfitSplit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRebalancePercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateHighClosingTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLowClosingTokens",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHANGE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProfitSplit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRebalancePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateHighClosingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateLowClosingTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class PairFunctions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PairFunctionsInterface;

  functions: {
    CHANGE_DECIMALS(overrides?: CallOverrides): Promise<[number]>;

    "CHANGE_DECIMALS()"(overrides?: CallOverrides): Promise<[number]>;

    priceChange(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { change: BigNumber }>;

    "priceChange(uint256,uint256)"(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { change: BigNumber }>;

    calculateProfitSplit(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { profitSplit: BigNumber }>;

    "calculateProfitSplit(int256,uint256)"(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { profitSplit: BigNumber }>;

    calculateRebalancePercentage(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancePercentage: BigNumber }>;

    "calculateRebalancePercentage(uint256,uint256)"(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rebalancePercentage: BigNumber }>;

    calculateHighClosingTokens(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { closingTokens: BigNumber }>;

    "calculateHighClosingTokens(uint256,int256,uint256,uint256)"(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { closingTokens: BigNumber }>;

    calculateLowClosingTokens(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { closingTokens: BigNumber }>;

    "calculateLowClosingTokens(uint256,int256,uint256,uint256)"(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { closingTokens: BigNumber }>;
  };

  CHANGE_DECIMALS(overrides?: CallOverrides): Promise<number>;

  "CHANGE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

  priceChange(
    _openPrice: BigNumberish,
    _closePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "priceChange(uint256,uint256)"(
    _openPrice: BigNumberish,
    _closePrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateProfitSplit(
    _fee: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateProfitSplit(int256,uint256)"(
    _fee: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRebalancePercentage(
    _change: BigNumberish,
    _slicePoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateRebalancePercentage(uint256,uint256)"(
    _change: BigNumberish,
    _slicePoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateHighClosingTokens(
    _highBalance: BigNumberish,
    _profitSplit: BigNumberish,
    _rebalance: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateHighClosingTokens(uint256,int256,uint256,uint256)"(
    _highBalance: BigNumberish,
    _profitSplit: BigNumberish,
    _rebalance: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateLowClosingTokens(
    _lowBalance: BigNumberish,
    _profitSplit: BigNumberish,
    _rebalance: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateLowClosingTokens(uint256,int256,uint256,uint256)"(
    _lowBalance: BigNumberish,
    _profitSplit: BigNumberish,
    _rebalance: BigNumberish,
    _change: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    CHANGE_DECIMALS(overrides?: CallOverrides): Promise<number>;

    "CHANGE_DECIMALS()"(overrides?: CallOverrides): Promise<number>;

    priceChange(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceChange(uint256,uint256)"(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProfitSplit(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateProfitSplit(int256,uint256)"(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRebalancePercentage(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRebalancePercentage(uint256,uint256)"(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateHighClosingTokens(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateHighClosingTokens(uint256,int256,uint256,uint256)"(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLowClosingTokens(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLowClosingTokens(uint256,int256,uint256,uint256)"(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    CHANGE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "CHANGE_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceChange(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceChange(uint256,uint256)"(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProfitSplit(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateProfitSplit(int256,uint256)"(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRebalancePercentage(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateRebalancePercentage(uint256,uint256)"(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateHighClosingTokens(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateHighClosingTokens(uint256,int256,uint256,uint256)"(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateLowClosingTokens(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateLowClosingTokens(uint256,int256,uint256,uint256)"(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHANGE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CHANGE_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceChange(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceChange(uint256,uint256)"(
      _openPrice: BigNumberish,
      _closePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProfitSplit(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateProfitSplit(int256,uint256)"(
      _fee: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRebalancePercentage(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateRebalancePercentage(uint256,uint256)"(
      _change: BigNumberish,
      _slicePoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateHighClosingTokens(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateHighClosingTokens(uint256,int256,uint256,uint256)"(
      _highBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateLowClosingTokens(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateLowClosingTokens(uint256,int256,uint256,uint256)"(
      _lowBalance: BigNumberish,
      _profitSplit: BigNumberish,
      _rebalance: BigNumberish,
      _change: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
