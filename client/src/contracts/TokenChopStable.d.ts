/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenChopStableInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bandProtocol()": FunctionFragment;
    "base()": FunctionFragment;
    "baseSymbol()": FunctionFragment;
    "factory()": FunctionFragment;
    "name()": FunctionFragment;
    "poolType()": FunctionFragment;
    "previousPrice()": FunctionFragment;
    "price()": FunctionFragment;
    "priceDecimals()": FunctionFragment;
    "quote()": FunctionFragment;
    "quoteSymbol()": FunctionFragment;
    "sister()": FunctionFragment;
    "symbol()": FunctionFragment;
    "symbolLookup(string)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "typeId()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "setBandAddress(address)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "decimals()": FunctionFragment;
    "collateral()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "mintAtBaseAmount(uint256)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "refresh()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bandProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "quote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sister", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "symbolLookup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "typeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBandAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAtBaseAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "refresh", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bandProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sister", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "symbolLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "typeId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBandAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAtBaseAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refresh", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "CollateralCapitalize(uint256,uint256)": EventFragment;
    "CollateralTransfer(address,address,uint256)": EventFragment;
    "InsufficientCollateral(uint256,uint256)": EventFragment;
    "PriceUpdate(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralCapitalize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsufficientCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class TokenChopStable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenChopStableInterface;

  functions: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bandProtocol(overrides?: CallOverrides): Promise<[string]>;

    "bandProtocol()"(overrides?: CallOverrides): Promise<[string]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    "base()"(overrides?: CallOverrides): Promise<[string]>;

    baseSymbol(overrides?: CallOverrides): Promise<[string]>;

    "baseSymbol()"(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    poolType(overrides?: CallOverrides): Promise<[string]>;

    "poolType()"(overrides?: CallOverrides): Promise<[string]>;

    previousPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "previousPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceDecimals(overrides?: CallOverrides): Promise<[number]>;

    "priceDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    quote(overrides?: CallOverrides): Promise<[string]>;

    "quote()"(overrides?: CallOverrides): Promise<[string]>;

    quoteSymbol(overrides?: CallOverrides): Promise<[string]>;

    "quoteSymbol()"(overrides?: CallOverrides): Promise<[string]>;

    sister(overrides?: CallOverrides): Promise<[string]>;

    "sister()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    symbolLookup(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "symbolLookup(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    typeId(overrides?: CallOverrides): Promise<[number]>;

    "typeId()"(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBandAddress(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBandAddress(address)"(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the bep token owner.
     */
    getOwner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the bep token owner.
     */
    "getOwner()"(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the token decimals.
     */
    decimals(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Returns the token decimals.
     */
    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    collateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    "collateral()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintAtBaseAmount(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintAtBaseAmount(uint256)"(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burn(
      quoteAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      quoteAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refresh(overrides?: Overrides): Promise<ContractTransaction>;

    "refresh()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bandProtocol(overrides?: CallOverrides): Promise<string>;

  "bandProtocol()"(overrides?: CallOverrides): Promise<string>;

  base(overrides?: CallOverrides): Promise<string>;

  "base()"(overrides?: CallOverrides): Promise<string>;

  baseSymbol(overrides?: CallOverrides): Promise<string>;

  "baseSymbol()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  poolType(overrides?: CallOverrides): Promise<string>;

  "poolType()"(overrides?: CallOverrides): Promise<string>;

  previousPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "previousPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  "price()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceDecimals(overrides?: CallOverrides): Promise<number>;

  "priceDecimals()"(overrides?: CallOverrides): Promise<number>;

  quote(overrides?: CallOverrides): Promise<string>;

  "quote()"(overrides?: CallOverrides): Promise<string>;

  quoteSymbol(overrides?: CallOverrides): Promise<string>;

  "quoteSymbol()"(overrides?: CallOverrides): Promise<string>;

  sister(overrides?: CallOverrides): Promise<string>;

  "sister()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  symbolLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

  "symbolLookup(string)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  typeId(overrides?: CallOverrides): Promise<number>;

  "typeId()"(overrides?: CallOverrides): Promise<number>;

  initialize(
    _base: string,
    _quote: string,
    _sister: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _base: string,
    _quote: string,
    _sister: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBandAddress(
    _bandAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBandAddress(address)"(
    _bandAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the bep token owner.
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the bep token owner.
   */
  "getOwner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the token decimals.
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  /**
   * Returns the token decimals.
   */
  "decimals()"(overrides?: CallOverrides): Promise<number>;

  collateral(overrides?: CallOverrides): Promise<BigNumber>;

  "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    _spender: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    _sender: string,
    _recipient: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintAtBaseAmount(
    baseAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintAtBaseAmount(uint256)"(
    baseAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burn(
    quoteAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    quoteAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refresh(overrides?: Overrides): Promise<ContractTransaction>;

  "refresh()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bandProtocol(overrides?: CallOverrides): Promise<string>;

    "bandProtocol()"(overrides?: CallOverrides): Promise<string>;

    base(overrides?: CallOverrides): Promise<string>;

    "base()"(overrides?: CallOverrides): Promise<string>;

    baseSymbol(overrides?: CallOverrides): Promise<string>;

    "baseSymbol()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    poolType(overrides?: CallOverrides): Promise<string>;

    "poolType()"(overrides?: CallOverrides): Promise<string>;

    previousPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "previousPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecimals(overrides?: CallOverrides): Promise<number>;

    "priceDecimals()"(overrides?: CallOverrides): Promise<number>;

    quote(overrides?: CallOverrides): Promise<string>;

    "quote()"(overrides?: CallOverrides): Promise<string>;

    quoteSymbol(overrides?: CallOverrides): Promise<string>;

    "quoteSymbol()"(overrides?: CallOverrides): Promise<string>;

    sister(overrides?: CallOverrides): Promise<string>;

    "sister()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    symbolLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

    "symbolLookup(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<number>;

    "typeId()"(overrides?: CallOverrides): Promise<number>;

    initialize(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBandAddress(_bandAddr: string, overrides?: CallOverrides): Promise<void>;

    "setBandAddress(address)"(
      _bandAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the bep token owner.
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the bep token owner.
     */
    "getOwner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the token decimals.
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    /**
     * Returns the token decimals.
     */
    "decimals()"(overrides?: CallOverrides): Promise<number>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintAtBaseAmount(
      baseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mintAtBaseAmount(uint256)"(
      baseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    burn(
      quoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "burn(uint256)"(
      quoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    refresh(overrides?: CallOverrides): Promise<void>;

    "refresh()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    CollateralCapitalize(
      prevTotalSupply: null,
      newTotalSupply: null
    ): EventFilter;

    CollateralTransfer(
      from: string | null,
      to: string | null,
      value: null
    ): EventFilter;

    InsufficientCollateral(required: null, obtained: null): EventFilter;

    PriceUpdate(oldPrice: null, newPrice: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bandProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    "bandProtocol()"(overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    "base()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    "baseSymbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolType(overrides?: CallOverrides): Promise<BigNumber>;

    "poolType()"(overrides?: CallOverrides): Promise<BigNumber>;

    previousPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "previousPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "priceDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    quote(overrides?: CallOverrides): Promise<BigNumber>;

    "quote()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteSymbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    sister(overrides?: CallOverrides): Promise<BigNumber>;

    "sister()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbolLookup(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "symbolLookup(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    typeId(overrides?: CallOverrides): Promise<BigNumber>;

    "typeId()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBandAddress(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBandAddress(address)"(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the bep token owner.
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the bep token owner.
     */
    "getOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the token decimals.
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the token decimals.
     */
    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintAtBaseAmount(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintAtBaseAmount(uint256)"(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    burn(quoteAmount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      quoteAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    refresh(overrides?: Overrides): Promise<BigNumber>;

    "refresh()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bandProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bandProtocol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "base()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseSymbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "previousPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quote(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quote()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteSymbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sister(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sister()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbolLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "symbolLookup(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    typeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "typeId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _base: string,
      _quote: string,
      _sister: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBandAddress(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBandAddress(address)"(
      _bandAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the bep token owner.
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the bep token owner.
     */
    "getOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the token decimals.
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the token decimals.
     */
    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approve(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      _spender: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      _sender: string,
      _recipient: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintAtBaseAmount(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintAtBaseAmount(uint256)"(
      baseAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burn(
      quoteAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      quoteAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refresh(overrides?: Overrides): Promise<PopulatedTransaction>;

    "refresh()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
