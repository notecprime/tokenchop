/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockBandProtocolInterface extends ethers.utils.Interface {
  functions: {
    "getReferenceData(string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getReferenceData",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getReferenceData",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockBandProtocol extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockBandProtocolInterface;

  functions: {
    getReferenceData(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          rate: BigNumber;
          lastUpdatedBase: BigNumber;
          lastUpdatedQuote: BigNumber;
        }
      ]
    >;

    "getReferenceData(string,string)"(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          rate: BigNumber;
          lastUpdatedBase: BigNumber;
          lastUpdatedQuote: BigNumber;
        }
      ]
    >;
  };

  getReferenceData(
    _base: string,
    _quote: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      lastUpdatedBase: BigNumber;
      lastUpdatedQuote: BigNumber;
    }
  >;

  "getReferenceData(string,string)"(
    _base: string,
    _quote: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rate: BigNumber;
      lastUpdatedBase: BigNumber;
      lastUpdatedQuote: BigNumber;
    }
  >;

  callStatic: {
    getReferenceData(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        lastUpdatedBase: BigNumber;
        lastUpdatedQuote: BigNumber;
      }
    >;

    "getReferenceData(string,string)"(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rate: BigNumber;
        lastUpdatedBase: BigNumber;
        lastUpdatedQuote: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getReferenceData(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReferenceData(string,string)"(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getReferenceData(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReferenceData(string,string)"(
      _base: string,
      _quote: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
