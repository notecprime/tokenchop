/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { TokenChopPair } from "../TokenChopPair";

export class TokenChopPair__factory extends ContractFactory {
  constructor(
    linkLibraryAddresses: TokenChopPairLibraryAddresses,
    signer?: Signer
  ) {
    super(
      _abi,
      TokenChopPair__factory.linkBytecode(linkLibraryAddresses),
      signer
    );
  }

  static linkBytecode(
    linkLibraryAddresses: TokenChopPairLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__PairFunctions_________________________", "g"),
      linkLibraryAddresses["__PairFunctions_________________________"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(overrides?: Overrides): Promise<TokenChopPair> {
    return super.deploy(overrides || {}) as Promise<TokenChopPair>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenChopPair {
    return super.attach(address) as TokenChopPair;
  }
  connect(signer: Signer): TokenChopPair__factory {
    return super.connect(signer) as TokenChopPair__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenChopPair {
    return new Contract(address, _abi, signerOrProvider) as TokenChopPair;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "HighTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "LowTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ownerLow",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "ownerHigh",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "openPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    inputs: [],
    name: "FEE_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PRICE_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SLICE_POINT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SLICE_POINT_DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "base",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "closePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fee",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "highBalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highPoolSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "highToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "lowBalanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowPoolSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lowToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "openPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quote",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_base",
        type: "address",
      },
      {
        internalType: "address",
        name: "_quote",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "setClosePrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getHighTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintHighToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawHigh",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintLowToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawLow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115f7806100616000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638095fc92116100c3578063ccf288c61161007c578063ccf288c614610598578063d611e7e4146105b9578063ddca3f43146105d7578063e4ea3fc4146105f5578063f1a640f814610629578063f49ea9681461064a57610158565b80638095fc921461046c5780638711e51a146104b0578063999b93af146104f4578063c45a015514610528578063c79b25021461055c578063ccdf42991461057a57610158565b8063485cc95511610115578063485cc955146103265780634a2f21601461038a5780634ee60a07146103b85780635001f3b5146103d657806350d440141461040a578063572907451461042857610158565b806306fdde031461015d57806316400663146101e05780632c3fbb71146102385780632dfb66d71461026c5780632f2915331461028a57806334bcf143146102ce575b600080fd5b61016561066b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a557808201518184015260208101905061018a565b50505050905090810190601f1680156101d25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610222600480360360208110156101f657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061070d565b6040518082815260200191505060405180910390f35b610240610725565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61027461074b565b6040518082815260200191505060405180910390f35b6102b6600480360360208110156102a057600080fd5b8101908080359060200190929190505050610751565b60405180821515815260200191505060405180910390f35b610310600480360360208110156102e457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061098f565b6040518082815260200191505060405180910390f35b6103886004803603604081101561033c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109a7565b005b6103b6600480360360208110156103a057600080fd5b8101908080359060200190929190505050610a6e565b005b6103c0610ad1565b6040518082815260200191505060405180910390f35b6103de610d4b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610412610d71565b6040518082815260200191505060405180910390f35b6104546004803603602081101561043e57600080fd5b8101908080359060200190929190505050610d77565b60405180821515815260200191505060405180910390f35b6104986004803603602081101561048257600080fd5b8101908080359060200190929190505050610fb5565b60405180821515815260200191505060405180910390f35b6104dc600480360360208110156104c657600080fd5b8101908080359060200190929190505050611221565b60405180821515815260200191505060405180910390f35b6104fc61148d565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105306114b3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105646114d9565b6040518082815260200191505060405180910390f35b6105826114e1565b6040518082815260200191505060405180910390f35b6105a06114e7565b604051808260ff16815260200191505060405180910390f35b6105c16114ec565b6040518082815260200191505060405180910390f35b6105df6114f2565b6040518082815260200191505060405180910390f35b6105fd6114f8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61063161151e565b604051808260ff16815260200191505060405180910390f35b610652611523565b604051808260ff16815260200191505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050905090565b60056020528060005260406000206000915090505481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561079f57600080fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061081883600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461152890919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108708360065461152890919063ffffffff16565b6006819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f74d7abec1905190b3280dc7dcb8114cf72f654b130ab11826985d875c0ec019a856040518082815260200191505060405180910390a38073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561094c57600080fd5b505af1158015610960573d6000803e3d6000fd5b505050506040513d602081101561097657600080fd5b8101908080519060200190929190505050915050919050565b60046020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6b656e43686f703a20464f5242494444454e00000000000000000000000081525060200191505060405180910390fd5b5050565b60008111610ac7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806115a16021913960400191505060405180910390fd5b80600b8190555050565b60008073__PairFunctions_________________________630d5cda70600a54600b546040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610b2f57600080fd5b505af4158015610b43573d6000803e3d6000fd5b505050506040513d6020811015610b5957600080fd5b81019080805190602001909291905050509050600073__PairFunctions_________________________635e5ae01b600c54846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610bc757600080fd5b505af4158015610bdb573d6000803e3d6000fd5b505050506040513d6020811015610bf157600080fd5b81019080805190602001909291905050509050600073__PairFunctions_________________________6307619d23846302faf0806040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b158015610c6157600080fd5b505af4158015610c75573d6000803e3d6000fd5b505050506040513d6020811015610c8b57600080fd5b8101908080519060200190929190505050905073__PairFunctions_________________________636c1b7e0a621e84808484876040518563ffffffff1660e01b81526004018085815260200184815260200183815260200182815260200194505050505060206040518083038186803b158015610d0857600080fd5b505af4158015610d1c573d6000803e3d6000fd5b505050506040513d6020811015610d3257600080fd5b8101908080519060200190929190505050935050505090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115610dc557600080fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610e3e83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461152890919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e968360075461152890919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167f799db20fe02a8af1090dc6dcbb86edf25a65570ac55a15faf4e393e5fb6fe249856040518082815260200191505060405180910390a38073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610f7257600080fd5b505af1158015610f86573d6000803e3d6000fd5b505050506040513d6020811015610f9c57600080fd5b8101908080519060200190929190505050915050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561106e57600080fd5b505af1158015611082573d6000803e3d6000fd5b505050506040513d602081101561109857600080fd5b8101908080519060200190929190505050905080611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806115686039913960400191505060405180910390fd5b61115384600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154890919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111ab8460065461154890919063ffffffff16565b6006819055503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f74d7abec1905190b3280dc7dcb8114cf72f654b130ab11826985d875c0ec019a866040518082815260200191505060405180910390a3600192505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b1580156112da57600080fd5b505af11580156112ee573d6000803e3d6000fd5b505050506040513d602081101561130457600080fd5b810190808051906020019092919050505090508061136d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806115686039913960400191505060405180910390fd5b6113bf84600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461154890919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506114178460075461154890919063ffffffff16565b6007819055503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f799db20fe02a8af1090dc6dcbb86edf25a65570ac55a15faf4e393e5fb6fe249866040518082815260200191505060405180910390a3600192505050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6302faf08081565b600b5481565b600881565b60065481565b600c5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601281565b600881565b60008282111561153757600080fd5b600082840390508091505092915050565b60008082840190508381101561155d57600080fd5b809150509291505056fe4661696c656420746f207472616e7366657220746f6b656e2e205472616e73666572206d75737420626520617070726f766564206669727374436c6f73655072696365206d7573742062652067726561746572207468616e2030a2646970667358221220aa5537a96322a1bd2bbe7d77471b39ee761106e1c5c2cb5cfb3aa73e0fd9c83d64736f6c63430007060033";

export interface TokenChopPairLibraryAddresses {
  ["__PairFunctions_________________________"]: string;
}
